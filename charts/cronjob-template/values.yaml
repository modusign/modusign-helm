# -- name
name: cronjob-template

# -- Common labels for the all resources
additionalLabels: {}

# -- CronJob resource configuration
cronJob:
  # -- minute(0-59) hour(0-23) day-of-month(1-31) month(1-12) day-of-week(0-6, 0:Sunday)
  # -- refer https://kubernetes.io/ko/docs/concepts/workloads/controllers/cron-jobs/#%ED%81%AC%EB%A1%A0-%EC%8A%A4%EC%BC%80%EC%A4%84-%EB%AC%B8%EB%B2%95
  schedule: "* * * * *"
  # -- Available timezone evalues are listed in https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  timeZone: null
  # -- Either: `Allow`, `Forbid` or `Replace`
  concurrencyPolicy: null
  # -- Number that specifies the desired number of successful finished jobs the cron job should be run with.
  # @default -- `3` (defaults to 3 if not specified)
  successfulJobsHistoryLimit: 3
  # -- Number that specifies the desired number of failed finished jobs the cron job should be run with.
  # @default -- `1` (defaults to 1 if not specified)
  failedJobsHistoryLimit: 1

# -- Job resource configuration which is created by CronJob
job:
  # -- Number of successful finished jobs to retain.
  # @default -- `1` (defaults to 1 if not specified)
  completions: null
  # -- Specifies the maximum desired number of pods running at the same time
  # @default -- `1` (defaults to 1 if not specified)
  parallelism: null

# Default image used by all components
image:
  # -- hub applied to all deployments
  hub: harbor.modusign.co.kr/modusign
  # -- repository applied to all deployments
  repository: cronjob-template
  # -- global image tag
  tag: "1.0.0"
  # -- imagePullPolicy applied to all deployments
  imagePullPolicy: IfNotPresent


# -- Additional command line arguments to pass to the job container
extraArgs: []

# -- Additional command line arguments to pass to the job container
extraCommands: []

# -- Secrets with credentials to pull images from a private registry
imagePullSecrets: []

# -- Annotations for the all deployed pods
podAnnotations: {}

# -- Labels for the all deployed pods
podLabels: {}

# -- Default node selector for all components
nodeSelector: {}

# -- Default tolerations for all components
tolerations: []

# Default affinity preset for all components
affinity: {}
# # -- Default pod anti-affinity rules. Either: `none`, `soft` or `hard`
# podAntiAffinity: soft
# # Node affinity rules
# nodeAffinity:
#   # -- Default node affinity rules. Either: `none`, `soft` or `hard`
#   type: hard
#   # -- Default match expressions for node affinity
#   matchExpressions: []
#     # - key: topology.kubernetes.io/zone
#     #   operator: In
#     #   values:
#     #    - antarctica-east1
#     #    - antarctica-west1

# -- Default [TopologySpreadConstraints] rules for all components
## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
## If labelSelector is left out, it will default to the labelSelector of the component
topologySpreadConstraints: []
  # - maxSkew: 1
  #   topologyKey: topology.kubernetes.io/zone
  #   whenUnsatisfiable: DoNotSchedule

serviceAccount:
  # -- Create server service account
  create: true
  # -- Server service account name
  name: cronjob-template
  # -- Annotations applied to created service account
  annotations: {}
  # -- Labels applied to created service account
  labels: {}
  # -- Automount API credentials for the Service Account
  automountServiceAccountToken: false
  # -- Image pull Secrets for the Service Account
  imagePullSecrets: []

observability:
  # -- inject datadog admission controller env label
  datadog:
    admissionController:
      enabled: false
  # -- inject grafana
  # grafana:
  #   enabled: false

# -- Specify postStart and preStop lifecycle hooks for your container
lifecycle: {}

# -- Resource limits and requests for the server
resources:
  requests:
    memory: "800Mi"
    cpu: "400m"
  limits:
    memory: "1600Mi"
    cpu: "800m"

## Readiness and liveness probes for default backend
## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
# readinessProbe:
#   httpGet:
#     path: /health
#     port: 3000
#   # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
#   failureThreshold: 3
#   # -- Number of seconds after the container has started before [probe] is initiated
#   initialDelaySeconds: 10
#   # -- How often (in seconds) to perform the [probe]
#   periodSeconds: 10
#   # -- Minimum consecutive successes for the [probe] to be considered successful after having failed
#   successThreshold: 1
#   # -- Number of seconds after which the [probe] times out
#   timeoutSeconds: 1

# livenessProbe:
#   httpGet:
#     path: /health
#     port: 3000
#   # -- Minimum consecutive failures for the [probe] to be considered failed after having succeeded
#   failureThreshold: 3
#   # -- Number of seconds after the container has started before [probe] is initiated
#   initialDelaySeconds: 10
#   # -- How often (in seconds) to perform the [probe]
#   periodSeconds: 10
#   # -- Minimum consecutive successes for the [probe] to be considered successful after having failed
#   successThreshold: 1
#   # -- Number of seconds after which the [probe] times out
#   timeoutSeconds: 1

# -- terminationGracePeriodSeconds for container lifecycle hook
terminationGracePeriodSeconds: 30

# -- Init containers to add to the application server pod
initContainers: []
#  - name: download-tools
#    image: alpine:3
#    command: [sh, -c]
#    args:
#      - wget -qO kubelogin.zip https://github.com/Azure/kubelogin/releases/download/v0.0.25/kubelogin-linux-amd64.zip &&
#        unzip kubelogin.zip && mv bin/linux_amd64/kubelogin /custom-tools/
#    volumeMounts:
#      - mountPath: /custom-tools
#        name: custom-tools

# -- Additional volumeMounts to the application server main container
volumeMounts: []
#  - mountPath: /usr/local/bin/kubelogin
#    name: custom-tools
#    subPath: kubelogin

# -- Additional volumes to the application server pod
volumes: []
#  - name: custom-tools
#    emptyDir: {}

# -- Environment variables to pass to all deployed Deployments
env: {}

# -- extra secrets to pass to server
extraSecrets: []

# -- envfrom in server deployment
envFrom: []

# -- Secrets variables to pass to all deployed Deployments by argocd vault plugin
vault:
  enabled: false
  path: stage-default/application/${service}
  secrets: {}
